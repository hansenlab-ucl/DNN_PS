from PureShift.util import model, time_proc, normalize, prediction, spinecho_data_import, process_psyche, save_output, plot_spectra
import numpy as np
import warnings
import sys
import os
import nmrglue as ng
import matplotlib.pyplot as plt
warnings.filterwarnings('ignore')
import argparse
from pathlib import Path
import json

parser = argparse.ArgumentParser()
parser.add_argument("--spin_echo", type=Path)
parser.add_argument("--psyche", type=Path)
parser.add_argument("--output", type=Path)
parser.add_argument('--phase', type = int, choices =[0, 1], default=0)
parser.add_argument('--p0', type = float, default=0.0)
parser.add_argument('--p1', type = float, default=0.0)
parser.add_argument('--pp0', type = float, default=0.0)
parser.add_argument('--pp1', type = float, default=0.0)
parser.add_argument('--clear_phase', type = int, choices =[0, 1], default=0)
parser.add_argument('--scaling', type = int, default=20)
parser.add_argument('--ver_scale', type = float, default=1.0)
args = parser.parse_args()

if bool(args.clear_phase):
  try: 
    os.remove('.phases.json')
    sys.exit(10)
  except:
    sys.exit(10)
else:
  pass

try:
  with open('.phases.json', 'r') as file:
    phases = json.load(file)
except:
  pass     

try:
  try:
    p0 = phases['p0']
    p1 = phases['p1']
  except:
    p0 = 0.0
    p1 = 0.0
    
  if bool(args.phase): 
    p0 = p0 + args.p0
    p1 = p1 + args.p1 
    
    dic, inp, uc = spinecho_data_import(file_name = args.spin_echo,
  						p0=p0, p1=p1) 
  						
    phase_data = ng.proc_base.fft(inp[:,0,:][0].numpy())
    plt.title('Conventional 1H NMR')
    plt.plot(phase_data);
    plt.show()
  else:
    dic, inp, uc = spinecho_data_import(file_name = args.spin_echo,
  						p0=p0, p1=p1)
      						
except Exception as e:
  print('Check the path of spin-echo spectra!')
  print(e)
  sys.exit(1)
  

time, inp = time_proc(uc, inp)
TD, norm_factor, inp = normalize(inp, time)

if args.psyche:
  try:
    try:
      psyche_p0 = phases['psyche_p0']
      psyche_p1 = phases['psyche_p1']
    except:
      psyche_p0 = 0.0
      psyche_p1 = 0.0
    
    if bool(args.phase):
      psyche_p0 = psyche_p0 + args.pp0
      psyche_p1 = psyche_p1 + args.pp1
      psyche_1d = process_psyche(args.psyche, norm_factor, TD, p0=psyche_p0, p1=psyche_p1)
      plt.title('PSYCHE 1H NMR')
      plt.plot(psyche_1d[0,:])
      plt.show()
      
      phases = {'p0' : p0, 
          'p1' : p1,
          'psyche_p0' : psyche_p0,
          'psyche_p1' : psyche_p1}
  
      with open('.phases.json', 'w') as fp:
        json.dump(phases, fp)
    
      sys.exit(10) 
      
    else:
      
      psyche_1d = process_psyche(args.psyche, norm_factor, TD, p0=psyche_p0, p1=psyche_p1)
      
  except Exception as e:
    print('Check the path of psyche spectra!')
    print(e)
    sys.exit(1) 
else:
  if bool(args.phase):
    sys.exit(10)
  else:  	
    pass
  
try:
  psyche_p0 = phases['psyche_p0']
  psyche_p1 = phases['psyche_p1']
except:
  psyche_p0 = 0.0
  psyche_p1 = 0.0
  
phases = {'p0' : p0, 
          'p1' : p1,
          'psyche_p0' : psyche_p0,
          'psyche_p1' : psyche_p1}
  
with open('.phases.json', 'w') as fp:
  json.dump(phases, fp)   
  
if args.psyche is not None: 
  predicted = prediction(model, dic, inp, time, norm_factor, 
                        pred_scale=0.25,  vertical = 20, psyche_1d=psyche_1d, psyche_scale=16)               
else:
  predicted = prediction(model, dic, inp, time, norm_factor, 
                        pred_scale=0.25, vertical = 20, psyche_1d=None, psyche_scale=None)                      
                       
folder_name= str(args.output)  
scaling= args.scaling
ver_scale = 0.25*args.ver_scale

if os.path.exists(folder_name):
  pass
else:
  os.mkdir(folder_name)    
      
save_output(predicted, folder_name=folder_name)                                     
plot_spectra(predicted, scaling=scaling, ver_scale = ver_scale)                        
                        
                        
                        
                        
                        
